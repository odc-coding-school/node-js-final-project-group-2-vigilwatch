<div id="sidebar-container">
  <!-- Hamburger button -->
  <button
    data-drawer-target="default-sidebar"
    data-drawer-toggle="default-sidebar"
    aria-controls="default-sidebar"
    id="hamburger"
    type="button"
    class="inline-flex sm:hidden items-center p-2 mt-2 ms-3 text-sm text-gray-700 rounded-lg focus:outline-none focus:ring-0 dark:text-gray-300 dark:bg-gray-800 rounded shadow dark:shadow"
  >
    <span class="sr-only">Open sidebar</span>
    <svg
      class="w-6 h-6"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M4 6h16M4 12h16m-7 6h7"
      ></path>
    </svg>
  </button>

  <!-- sidebar -->
  <aside
    id="default-sidebar"
    class="fixed top-0 left-0 z-40 w-64 h-screen transition-transform -translate-x-full sm:translate-x-0 bg-white shadow-md dark:bg-gray-900"
    aria-label="Sidebar"
  >
    <button
      id="close-sidebar"
      type="button"
      class="inline-flex items-center p-2 mt-2 ms-3 text-sm text-gray-700 rounded-lg focus:outline-none focus:ring-0 dark:text-gray-300 dark:bg-gray-800 rounded shadow dark:shadow sm:hidden"
    >
      <span class="sr-only">Close sidebar</span>
      <svg
        class="w-6 h-6"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M6 18L18 6M6 6l12 12"
        ></path>
      </svg>
    </button>
    <div
      class="h-full px-4 py-4 overflow-y-auto bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100"
    >
      <ul class="space-y-2">
        <li><div class="flex min-h-full flex-col justify-center px-6 py-12 lg:px-8">
          <div class="sm:mx-auto sm:w-full sm:max-w-sm"> 
           
            <div class="user-profile">
              <% if (currentUser.profile_picture) { %>
                <img src="data:image/jpeg;base64,<%= currentUser.profile_picture.toString('base64') %>" alt="Profile Picture" class="profile-pic">
              <% } else { %>
                <img src="/images/profile-default.png" alt="Default Profile Picture" class="profile-pic">
              <% } %>
              <p class="username"><%= currentUser.name %></p>
            </div>        <br>  
          <hr class="border-gray-300 dark:border-gray-700" />
        </li>
        <li>
          <p class="flex items-center p-2 rounded-lg group">
            <img
              src="res/user.svg"
              id="user-icon"
              class="dark:hidden mr-2  w-5 h-5"
              alt="User Icon" 
            />

            <!-- Sun icon for dark mode -->
            <img
              src="res/user_dark.svg"
              id="user-icon-dark"
              class="hidden dark:block mr-2  w-5 h-5"
              alt="User Icon Dark"
               
            />

            Neighbors
            <span
              id="userCount"
              class="flex justify-center items-center h-6 w-6 rounded-full bg-orange-400 text-white text-xs font-bold ml-auto"
            >
            <%= total_neighbors %> </span
            >
          </p>
        </li>
      </ul>
      <!-- sidebar.ejs -->
      <ul class="user-list">
        <% users.forEach(user => { %>
          <li class="user-item" data-user-id="<%= user.id %>">
            <img src="data:image/png;base64,<%= user.profile_picture_base64 %>" class="profile-picture" alt="Profile Picture" />
            <h3><%= user.name %></h3>
          </li>
        <% }); %>
      </ul>
      

      <div class="flex flex-col justify-center px-6 py-12 lg:px-8">
      <button id="download-chat" 
        class="bg-transparent hover:bg-orange-500 text-orange-600 font-semibold hover:text-white py-2   px-4 border border-orange-500 hover:border-transparent rounded" />Download Chat</button></div> 
      <div
        class="absolute bottom-0 left-0 w-full bg-gray-200 dark:bg-gray-800 px-4 py-2"
      >
      <hr class="border-gray-300 dark:border-gray-700" />
        <label
          for="autoScrollCheckbox"
          class="flex items-center text-sm font-medium text-gray-900 dark:text-gray-200"
        >
          <input
            checked
            id="autoScrollCheckbox"
            type="checkbox"
            name="autoScroll"
            class="mr-2 text-orange-400 dark:text-orange-400 focus:ring-0 focus:outline-0"
          />
          Enable Auto Scroll
        </label>
      </div>   
    </div>
  </aside>
</div>
<script> 
  document.addEventListener("DOMContentLoaded", () => {
    const hamburgerButton = document.getElementById("hamburger");
    const closeButton = document.getElementById("close-sidebar");
    const sidebar = document.getElementById("default-sidebar");

    hamburgerButton.addEventListener("click", () => {
      sidebar.classList.remove("-translate-x-full");
    });

    closeButton.addEventListener("click", () => {
      sidebar.classList.add("-translate-x-full");
    });
  });
</script>


<script>
  document.getElementById('download-chat').addEventListener('click', function() {
      var messagesDiv = document.getElementById('messages-container');
      var messageBubbles = messagesDiv.getElementsByClassName('message-bubble');
      var chatData = [];
  
      for (var i = 0; i < messageBubbles.length; i++) {
          var username = messageBubbles[i].getElementsByClassName('message-username')[0].innerText;
          var time = messageBubbles[i].getElementsByClassName('message-time')[0].innerText;
          var text = messageBubbles[i].getElementsByClassName('message-content')[0].innerText;
  
          chatData.push({
              username: username,
              time: time,
              text: text
          });
      }
  
      // Convert chat data to a JSON string
      var jsonData = JSON.stringify(chatData);
  
      // Create a Blob from the JSON string
      var blob = new Blob([jsonData], {type: 'application/json'});
  
      // Create a link element, use it to download the blob, and then remove it
      var url = URL.createObjectURL(blob);
      var link = document.createElement('a');
      link.href = url;
      link.download = 'chat_history.json';
      link.click();
      URL.revokeObjectURL(url); // Clean up by revoking the object URL after use
  });
  </script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const userItems = document.querySelectorAll('.user-item');
    const newMessageForm = document.getElementById('newMessageForm');
    const messageInput = document.getElementById('messageInput');
    
    // Add click event listener to each user item
    userItems.forEach(item => {
      item.addEventListener('click', function() {
        // Get the selected user's ID
        const selectedUserId = this.getAttribute('data-user-id');
        
        // Display the message input field
        newMessageForm.classList.remove('hidden');
        
        // You can also set the selected user ID somewhere in the form if needed
        messageInput.placeholder = `Message to ${this.querySelector('h3').innerText}`;
        
        // Further actions like storing the selected user ID for later message sending can be handled here
        // For example, send the selected user ID to the server for further message processing
      });
    });
  });
</script>


<!-- <script>
  document.addEventListener('DOMContentLoaded', () => {
    const userList = document.getElementById('userList');

    // Initialize WebSocket connection
    const socket = io();

    // Listen for the 'location_users' event from the server
    socket.on('location_users', (users) => {
      // Clear the userList before appending new data
      userList.innerHTML = ''; 

      if (users.length === 0) {
        const noUsersMessage = document.createElement('p');
        noUsersMessage.textContent = 'No other users in your location.';
        userList.appendChild(noUsersMessage);
      } else {
        users.forEach(user => {
          const listItem = document.createElement('li');
          listItem.classList.add('flex', 'items-center', 'space-x-2', 'p-2', 'rounded-lg', 'group');

          const img = document.createElement('img');
img.src = user.profile_picture
  ? `data:image/jpeg;base64,${btoa(user.profile_picture)}`  
  : '/images/profile-default.png';

          img.alt = `${user.name}'s profile picture`;
          img.classList.add('w-8', 'h-8', 'rounded-full');

          const nameSpan = document.createElement('span');
          nameSpan.textContent = user.name;

          listItem.appendChild(img);
          listItem.appendChild(nameSpan);

          // Handle user chat selection logic
          listItem.addEventListener('click', () => {
            document.getElementById('chatWithUser').textContent = `Chatting with ${user.name}`;
            // Implement chat start logic here
          });

          userList.appendChild(listItem);
        });
      }
    });
  });
</script> -->

